// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "gtchart.h"

/////////////////////////////////////////////////////////////////////////////
// CGTChart

IMPLEMENT_DYNCREATE(CGTChart, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CGTChart properties

long CGTChart::GetLineHeight()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CGTChart::SetLineHeight(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

unsigned long CGTChart::GetOddLineColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CGTChart::SetOddLineColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

unsigned long CGTChart::GetEvenLineColor()
{
	unsigned long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CGTChart::SetEvenLineColor(unsigned long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

unsigned long CGTChart::GetItemColor()
{
	unsigned long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CGTChart::SetItemColor(unsigned long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

CString CGTChart::GetResourceBarCaption()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CGTChart::SetResourceBarCaption(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

BOOL CGTChart::GetEnableOverlap()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CGTChart::SetEnableOverlap(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

BOOL CGTChart::GetNumber()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CGTChart::SetNumber(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

BOOL CGTChart::GetMoveItemSnapLineable()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CGTChart::SetMoveItemSnapLineable(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

BOOL CGTChart::GetItemColorGradual()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CGTChart::SetItemColorGradual(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

short CGTChart::GetRulerMin()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}

void CGTChart::SetRulerMin(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}

short CGTChart::GetRulerMax()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CGTChart::SetRulerMax(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

long CGTChart::GetJumpTime()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CGTChart::SetJumpTime(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

unsigned long CGTChart::GetItemColor2()
{
	unsigned long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CGTChart::SetItemColor2(unsigned long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}
/////////////////////////////////////////////////////////////////////////////
// CGTChart operations

BOOL CGTChart::InitControl(long pMainThread)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pMainThread);
	return result;
}

long CGTChart::GetItemNumOfLine(long nIndexLineItem)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nIndexLineItem);
	return result;
}

long CGTChart::GetLineNum()
{
	long result;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CGTChart::DoDropOver(long* nLineIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nLineIndex);
	return result;
}

BOOL CGTChart::SetLineData(long nIndexLine, long nLineData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nIndexLine, nLineData);
	return result;
}

BOOL CGTChart::GetLineData(long nLineIndex, long* pnLineData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nLineIndex, pnLineData);
	return result;
}

BOOL CGTChart::GetItemInfo(long nItemIndex, BSTR* strCaption, BSTR* strAddition, long* timeBegin, long* timeDuration)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PBSTR VTS_PBSTR VTS_PI4 VTS_PI4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nItemIndex, strCaption, strAddition, timeBegin, timeDuration);
	return result;
}

long CGTChart::GetItemNum()
{
	long result;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CGTChart::SetItemData(long nItemIndex, long nItemData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nItemIndex, nItemData);
	return result;
}

BOOL CGTChart::GetItemData(long nItemIndex, long* pnItemData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nItemIndex, pnItemData);
	return result;
}

long CGTChart::GetCurSeledItem(long* pnItemIndexSeled)
{
	long result;
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pnItemIndexSeled);
	return result;
}

long CGTChart::GetCurSeledLine()
{
	long result;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CGTChart::Clear(BOOL bRefresh)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bRefresh);
}

long CGTChart::ClearAllItemOfLine(long nLineIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nLineIndex);
	return result;
}

long CGTChart::AddItem(long* pnItemIndex, long nLineIndex, LPCTSTR strCaption, LPCTSTR strAddition, long timeBegin, long timeDuration, BOOL bRePosition,COLORREF colorBegin,COLORREF colorEnd)
{
	long result;
	static BYTE parms[] =
		VTS_PI4 VTS_I4 VTS_BSTR VTS_BSTR VTS_I4 VTS_I4 VTS_BOOL VTS_I4 VTS_I4;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pnItemIndex, nLineIndex, strCaption, strAddition, timeBegin, timeDuration, bRePosition,colorBegin,colorEnd);
	return result;
}

long CGTChart::AddLine(LPCTSTR strCaption, LPCTSTR strAddition)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		strCaption, strAddition);
	return result;
}

void CGTChart::EnableBtn(long nBtnIndex, BOOL bEnable)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nBtnIndex, bEnable);
}

void CGTChart::ShowBtn(long nBtnIndex, BOOL bShow)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nBtnIndex, bShow);
}

long CGTChart::ResetItemDataOfLine(long nLineIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nLineIndex);
	return result;
}

long CGTChart::GetItemSeledNum()
{
	long result;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CGTChart::ClearItemSeled(BOOL bRefresh)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		bRefresh);
	return result;
}

BOOL CGTChart::SetLineModifyable(long nLineIndex, BOOL bModifyable)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nLineIndex, bModifyable);
	return result;
}

BOOL CGTChart::SetItemAdditonInfo(long nItemIndex, LPCTSTR strAddition)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nItemIndex, strAddition);
	return result;
}

BOOL CGTChart::SetLineSeled(long nLineIndex, BOOL bSeled, BOOL bRefresh)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nLineIndex, bSeled, bRefresh);
	return result;
}

void CGTChart::SetAllLineModifyable(BOOL bModifyable)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bModifyable);
}

void CGTChart::GetScrollPos(long* xPos, long* yPos)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 xPos, yPos);
}

void CGTChart::SetScrollPos(long xPos, long yPos)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 xPos, yPos);
}

BOOL CGTChart::IsUnderCursor()
{
	BOOL result;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CGTChart::DelLine(long nLineIndex, BOOL bRefresh)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nLineIndex, bRefresh);
	return result;
}

void CGTChart::GetScrollRange(long* nXRange, long* nYRange)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nXRange, nYRange);
}

BOOL CGTChart::GetLineIndexOfItem(long nItemIndex, long* pnLineIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nItemIndex, pnLineIndex);
	return result;
}

BOOL CGTChart::DelItem(long nLineIndex, long nItemIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nLineIndex, nItemIndex);
	return result;
}


void CGTChart::EnableLinkLine()
{
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGTChart::DisableLinkLine()
{
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_EMPTY,  NULL, NULL);
}

void CGTChart::SetItemLink(long nLineIndex, long nItemIndex,BOOL bEnableLinkLine)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		nLineIndex, nItemIndex,bEnableLinkLine);
}

void CGTChart::SetPreItem(long nLineIndex, long nItemIndex,long nPreLineIndex,long nPreItemIndex)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		nLineIndex, nItemIndex,nPreLineIndex,nPreItemIndex);
}

void CGTChart::SetNextItem(long nLineIndex, long nItemIndex,long nNextLineIndex,long nNextItemIndex)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		nLineIndex, nItemIndex,nNextLineIndex,nNextItemIndex);
}

void CGTChart::SetLinkLineItem(long nLineIndex, long nItemIndex,long nLinkLineIndex,long nLinkItemIndex)
{
	static BYTE parms[] = 
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		nLineIndex, nItemIndex,nLinkLineIndex,nLinkItemIndex);
}

void CGTChart::UpdateViews(BOOL bRefreshResourceView/* =TRUE */)
{
	static BYTE parms[] = 
		VTS_BOOL;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		bRefreshResourceView);
}

void CGTChart::SetPrintReportTitle(LPSTR strCaption)
{
	static BYTE parms[] = 
		VTS_BSTR;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		strCaption);
}

void CGTChart::SetReportPath(LPSTR strReportPath)
{
	static BYTE parms[] = 
		VTS_BSTR;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		strReportPath);
}
void CGTChart::ShowCaptionInItemTooltip(BOOL bShow)
{
	static BYTE parms[] = 
		VTS_BOOL;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		bShow);
}
void CGTChart::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
