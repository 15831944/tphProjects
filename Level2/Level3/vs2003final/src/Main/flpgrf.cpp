// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "flpgrf.h"

/////////////////////////////////////////////////////////////////////////////
// CFlpGrf

IMPLEMENT_DYNCREATE(CFlpGrf, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CFlpGrf properties

long CFlpGrf::GetAxis()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetAxis(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

short CFlpGrf::GetAxisAdjust()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisAdjust(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}

long CFlpGrf::GetAxisAdjustEvenSpace()
{
	long result;
	GetProperty(0x7b, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisAdjustEvenSpace(long propVal)
{
	SetProperty(0x7b, VT_I4, propVal);
}

BOOL CFlpGrf::GetAxisAsPercent()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisAsPercent(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

double CFlpGrf::GetAxisBarBaseValue()
{
	double result;
	GetProperty(0x7, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisBarBaseValue(double propVal)
{
	SetProperty(0x7, VT_R8, propVal);
}

BOOL CFlpGrf::GetAxisBarBase()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisBarBase(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

CString CFlpGrf::GetAxisDecimalSeparator()
{
	CString result;
	GetProperty(0x78, VT_BSTR, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisDecimalSeparator(LPCTSTR propVal)
{
	SetProperty(0x78, VT_BSTR, propVal);
}

BOOL CFlpGrf::GetAxisGrid()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisGrid(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

unsigned long CFlpGrf::GetAxisGridColor()
{
	unsigned long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisGridColor(unsigned long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

BOOL CFlpGrf::GetAxisGone()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisGone(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

long CFlpGrf::GetAxisGridPattern()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisGridPattern(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

short CFlpGrf::GetAxisTitleDistance()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisTitleDistance(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

BOOL CFlpGrf::GetAxisLog()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisLog(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

BOOL CFlpGrf::GetAxisReverse()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisReverse(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

unsigned long CFlpGrf::GetAxisScaleBackColor()
{
	unsigned long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScaleBackColor(unsigned long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

unsigned long CFlpGrf::GetAxisScaleColor()
{
	unsigned long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScaleColor(unsigned long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

short CFlpGrf::GetAxisScaleDec()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScaleDec(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}

short CFlpGrf::GetAxisScaleFont()
{
	short result;
	GetProperty(0x13, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScaleFont(short propVal)
{
	SetProperty(0x13, VT_I2, propVal);
}

double CFlpGrf::GetAxisScaleInc()
{
	double result;
	GetProperty(0x14, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScaleInc(double propVal)
{
	SetProperty(0x14, VT_R8, propVal);
}

BOOL CFlpGrf::GetAxisScaleManual()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScaleManual(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}

double CFlpGrf::GetAxisScaleMax()
{
	double result;
	GetProperty(0x16, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScaleMax(double propVal)
{
	SetProperty(0x16, VT_R8, propVal);
}

double CFlpGrf::GetAxisScaleMin()
{
	double result;
	GetProperty(0x17, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScaleMin(double propVal)
{
	SetProperty(0x17, VT_R8, propVal);
}

CString CFlpGrf::GetAxisScalePostChar()
{
	CString result;
	GetProperty(0x18, VT_BSTR, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScalePostChar(LPCTSTR propVal)
{
	SetProperty(0x18, VT_BSTR, propVal);
}

CString CFlpGrf::GetAxisScalePreChar()
{
	CString result;
	GetProperty(0x19, VT_BSTR, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScalePreChar(LPCTSTR propVal)
{
	SetProperty(0x19, VT_BSTR, propVal);
}

short CFlpGrf::GetAxisScaleSize()
{
	short result;
	GetProperty(0x1a, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScaleSize(short propVal)
{
	SetProperty(0x1a, VT_I2, propVal);
}

short CFlpGrf::GetAxisScaleSkip()
{
	short result;
	GetProperty(0x1b, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScaleSkip(short propVal)
{
	SetProperty(0x1b, VT_I2, propVal);
}

CString CFlpGrf::GetAxisThousandsSeparator()
{
	CString result;
	GetProperty(0x79, VT_BSTR, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisThousandsSeparator(LPCTSTR propVal)
{
	SetProperty(0x79, VT_BSTR, propVal);
}

BOOL CFlpGrf::GetAxisTickLine()
{
	BOOL result;
	GetProperty(0x7a, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisTickLine(BOOL propVal)
{
	SetProperty(0x7a, VT_BOOL, propVal);
}

BOOL CFlpGrf::GetAxisTicks()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisTicks(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}

CString CFlpGrf::GetAxisTitle()
{
	CString result;
	GetProperty(0x1d, VT_BSTR, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisTitle(LPCTSTR propVal)
{
	SetProperty(0x1d, VT_BSTR, propVal);
}

unsigned long CFlpGrf::GetAxisTitleBackColor()
{
	unsigned long result;
	GetProperty(0x1e, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisTitleBackColor(unsigned long propVal)
{
	SetProperty(0x1e, VT_I4, propVal);
}

unsigned long CFlpGrf::GetAxisTitleColor()
{
	unsigned long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisTitleColor(unsigned long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

short CFlpGrf::GetAxisTitleFont()
{
	short result;
	GetProperty(0x20, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisTitleFont(short propVal)
{
	SetProperty(0x20, VT_I2, propVal);
}

OLE_COLOR CFlpGrf::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

short CFlpGrf::GetColumn()
{
	short result;
	GetProperty(0x21, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetColumn(short propVal)
{
	SetProperty(0x21, VT_I2, propVal);
}

long CFlpGrf::GetColumnAxis()
{
	long result;
	GetProperty(0x22, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnAxis(long propVal)
{
	SetProperty(0x22, VT_I4, propVal);
}

unsigned long CFlpGrf::GetColumnColor()
{
	unsigned long result;
	GetProperty(0x23, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnColor(unsigned long propVal)
{
	SetProperty(0x23, VT_I4, propVal);
}

long CFlpGrf::GetColumnLabels()
{
	long result;
	GetProperty(0x24, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnLabels(long propVal)
{
	SetProperty(0x24, VT_I4, propVal);
}

CString CFlpGrf::GetColumnLegend()
{
	CString result;
	GetProperty(0x25, VT_BSTR, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnLegend(LPCTSTR propVal)
{
	SetProperty(0x25, VT_BSTR, propVal);
}

short CFlpGrf::GetColumnLineWidth()
{
	short result;
	GetProperty(0x26, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnLineWidth(short propVal)
{
	SetProperty(0x26, VT_I2, propVal);
}

short CFlpGrf::GetColumnMarkSize()
{
	short result;
	GetProperty(0x27, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnMarkSize(short propVal)
{
	SetProperty(0x27, VT_I2, propVal);
}

long CFlpGrf::GetColumnMiss()
{
	long result;
	GetProperty(0x28, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnMiss(long propVal)
{
	SetProperty(0x28, VT_I4, propVal);
}

long CFlpGrf::GetColumnMissStyle()
{
	long result;
	GetProperty(0x29, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnMissStyle(long propVal)
{
	SetProperty(0x29, VT_I4, propVal);
}

double CFlpGrf::GetColumnMissValue()
{
	double result;
	GetProperty(0x2a, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnMissValue(double propVal)
{
	SetProperty(0x2a, VT_R8, propVal);
}

long CFlpGrf::GetColumnPattern()
{
	long result;
	GetProperty(0x2b, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnPattern(long propVal)
{
	SetProperty(0x2b, VT_I4, propVal);
}

double CFlpGrf::GetColumnRegressR()
{
	double result;
	GetProperty(0x2c, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnRegressR(double propVal)
{
	SetProperty(0x2c, VT_R8, propVal);
}

double CFlpGrf::GetColumnRegressR2()
{
	double result;
	GetProperty(0x2d, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnRegressR2(double propVal)
{
	SetProperty(0x2d, VT_R8, propVal);
}

double CFlpGrf::GetColumnRegressSlope()
{
	double result;
	GetProperty(0x2e, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnRegressSlope(double propVal)
{
	SetProperty(0x2e, VT_R8, propVal);
}

double CFlpGrf::GetColumnRegressYInter()
{
	double result;
	GetProperty(0x2f, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnRegressYInter(double propVal)
{
	SetProperty(0x2f, VT_R8, propVal);
}

short CFlpGrf::GetColumnStyle()
{
	short result;
	GetProperty(0x30, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnStyle(short propVal)
{
	SetProperty(0x30, VT_I2, propVal);
}

long CFlpGrf::GetColumnType()
{
	long result;
	GetProperty(0x31, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnType(long propVal)
{
	SetProperty(0x31, VT_I4, propVal);
}

long CFlpGrf::GetDataBeginRow()
{
	long result;
	GetProperty(0x32, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetDataBeginRow(long propVal)
{
	SetProperty(0x32, VT_I4, propVal);
}

long CFlpGrf::GetDataEndRow()
{
	long result;
	GetProperty(0x33, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetDataEndRow(long propVal)
{
	SetProperty(0x33, VT_I4, propVal);
}

short CFlpGrf::GetDataInit()
{
	short result;
	GetProperty(0x34, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetDataInit(short propVal)
{
	SetProperty(0x34, VT_I2, propVal);
}

long CFlpGrf::GetDataRows()
{
	long result;
	GetProperty(0x35, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetDataRows(long propVal)
{
	SetProperty(0x35, VT_I4, propVal);
}

VARIANT CFlpGrf::GetDataStore()
{
	VARIANT result;
	GetProperty(0x36, VT_VARIANT, (void*)&result);
	return result;
}

void CFlpGrf::SetDataStore(const VARIANT& propVal)
{
	SetProperty(0x36, VT_VARIANT, &propVal);
}

BOOL CFlpGrf::GetFontBold()
{
	BOOL result;
	GetProperty(0x37, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetFontBold(BOOL propVal)
{
	SetProperty(0x37, VT_BOOL, propVal);
}

short CFlpGrf::GetFontCurrent()
{
	short result;
	GetProperty(0x38, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetFontCurrent(short propVal)
{
	SetProperty(0x38, VT_I2, propVal);
}

BOOL CFlpGrf::GetFontItalic()
{
	BOOL result;
	GetProperty(0x39, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetFontItalic(BOOL propVal)
{
	SetProperty(0x39, VT_BOOL, propVal);
}

CString CFlpGrf::GetFontOpen()
{
	CString result;
	GetProperty(0x3a, VT_BSTR, (void*)&result);
	return result;
}

void CFlpGrf::SetFontOpen(LPCTSTR propVal)
{
	SetProperty(0x3a, VT_BSTR, propVal);
}

long CFlpGrf::GetFontSize()
{
	long result;
	GetProperty(0x3b, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetFontSize(long propVal)
{
	SetProperty(0x3b, VT_I4, propVal);
}

BOOL CFlpGrf::GetFontUnderline()
{
	BOOL result;
	GetProperty(0x3c, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetFontUnderline(BOOL propVal)
{
	SetProperty(0x3c, VT_BOOL, propVal);
}

short CFlpGrf::GetGraph()
{
	short result;
	GetProperty(0x3d, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetGraph(short propVal)
{
	SetProperty(0x3d, VT_I2, propVal);
}

long CFlpGrf::GetGraph3DBarType()
{
	long result;
	GetProperty(0x3e, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetGraph3DBarType(long propVal)
{
	SetProperty(0x3e, VT_I4, propVal);
}

long CFlpGrf::GetGraph3DDistance()
{
	long result;
	GetProperty(0x3f, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetGraph3DDistance(long propVal)
{
	SetProperty(0x3f, VT_I4, propVal);
}

short CFlpGrf::GetGraph3DElevation()
{
	short result;
	GetProperty(0x76, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetGraph3DElevation(short propVal)
{
	SetProperty(0x76, VT_I2, propVal);
}

short CFlpGrf::GetGraph3DLayerDepth()
{
	short result;
	GetProperty(0x40, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetGraph3DLayerDepth(short propVal)
{
	SetProperty(0x40, VT_I2, propVal);
}

short CFlpGrf::GetGraph3DRotation()
{
	short result;
	GetProperty(0x41, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetGraph3DRotation(short propVal)
{
	SetProperty(0x41, VT_I2, propVal);
}

short CFlpGrf::GetGraphBarWidth()
{
	short result;
	GetProperty(0x42, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphBarWidth(short propVal)
{
	SetProperty(0x42, VT_I2, propVal);
}

double CFlpGrf::GetGraphAreaLeft()
{
	double result;
	GetProperty(0x43, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphAreaLeft(double propVal)
{
	SetProperty(0x43, VT_R8, propVal);
}

double CFlpGrf::GetGraphAreaTop()
{
	double result;
	GetProperty(0x44, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphAreaTop(double propVal)
{
	SetProperty(0x44, VT_R8, propVal);
}

double CFlpGrf::GetGraphAreaRight()
{
	double result;
	GetProperty(0x45, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphAreaRight(double propVal)
{
	SetProperty(0x45, VT_R8, propVal);
}

double CFlpGrf::GetGraphAreaBottom()
{
	double result;
	GetProperty(0x46, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphAreaBottom(double propVal)
{
	SetProperty(0x46, VT_R8, propVal);
}

unsigned long CFlpGrf::GetGraphBackColor()
{
	unsigned long result;
	GetProperty(0x47, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphBackColor(unsigned long propVal)
{
	SetProperty(0x47, VT_I4, propVal);
}

unsigned long CFlpGrf::GetGraphBorderColor()
{
	unsigned long result;
	GetProperty(0x48, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphBorderColor(unsigned long propVal)
{
	SetProperty(0x48, VT_I4, propVal);
}

long CFlpGrf::GetGraphEdit()
{
	long result;
	GetProperty(0x77, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphEdit(long propVal)
{
	SetProperty(0x77, VT_I4, propVal);
}

BOOL CFlpGrf::GetGraphEnabled()
{
	BOOL result;
	GetProperty(0x4a, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphEnabled(BOOL propVal)
{
	SetProperty(0x4a, VT_BOOL, propVal);
}

BOOL CFlpGrf::GetGraphFrame()
{
	BOOL result;
	GetProperty(0x4b, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphFrame(BOOL propVal)
{
	SetProperty(0x4b, VT_BOOL, propVal);
}

unsigned long CFlpGrf::GetGraphFrameColor()
{
	unsigned long result;
	GetProperty(0x49, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphFrameColor(unsigned long propVal)
{
	SetProperty(0x49, VT_I4, propVal);
}

BOOL CFlpGrf::GetGraphHistogram()
{
	BOOL result;
	GetProperty(0x4c, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphHistogram(BOOL propVal)
{
	SetProperty(0x4c, VT_BOOL, propVal);
}

long CFlpGrf::GetGraphOverlap()
{
	long result;
	GetProperty(0x4d, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphOverlap(long propVal)
{
	SetProperty(0x4d, VT_I4, propVal);
}

BOOL CFlpGrf::GetGraphRecord()
{
	BOOL result;
	GetProperty(0x4e, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphRecord(BOOL propVal)
{
	SetProperty(0x4e, VT_BOOL, propVal);
}

BOOL CFlpGrf::GetGraphReset()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphReset(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

BOOL CFlpGrf::GetGraphSwapScale()
{
	BOOL result;
	GetProperty(0x4f, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphSwapScale(BOOL propVal)
{
	SetProperty(0x4f, VT_BOOL, propVal);
}

CString CFlpGrf::GetGraphTitle()
{
	CString result;
	GetProperty(0x50, VT_BSTR, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphTitle(LPCTSTR propVal)
{
	SetProperty(0x50, VT_BSTR, propVal);
}

unsigned long CFlpGrf::GetGraphTitleBackColor()
{
	unsigned long result;
	GetProperty(0x51, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphTitleBackColor(unsigned long propVal)
{
	SetProperty(0x51, VT_I4, propVal);
}

unsigned long CFlpGrf::GetGraphTitleColor()
{
	unsigned long result;
	GetProperty(0x52, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphTitleColor(unsigned long propVal)
{
	SetProperty(0x52, VT_I4, propVal);
}

short CFlpGrf::GetGraphTitleFont()
{
	short result;
	GetProperty(0x53, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphTitleFont(short propVal)
{
	SetProperty(0x53, VT_I2, propVal);
}

short CFlpGrf::GetGraphTitleFont2()
{
	short result;
	GetProperty(0x54, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphTitleFont2(short propVal)
{
	SetProperty(0x54, VT_I2, propVal);
}

long CFlpGrf::GetGraphType()
{
	long result;
	GetProperty(0x55, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphType(long propVal)
{
	SetProperty(0x55, VT_I4, propVal);
}

long CFlpGrf::GetLegendAlign()
{
	long result;
	GetProperty(0x56, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetLegendAlign(long propVal)
{
	SetProperty(0x56, VT_I4, propVal);
}

unsigned long CFlpGrf::GetLegendBackColor()
{
	unsigned long result;
	GetProperty(0x57, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetLegendBackColor(unsigned long propVal)
{
	SetProperty(0x57, VT_I4, propVal);
}

short CFlpGrf::GetLegendColumns()
{
	short result;
	GetProperty(0x58, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetLegendColumns(short propVal)
{
	SetProperty(0x58, VT_I2, propVal);
}

short CFlpGrf::GetLegendFrameDist()
{
	short result;
	GetProperty(0x59, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetLegendFrameDist(short propVal)
{
	SetProperty(0x59, VT_I2, propVal);
}

short CFlpGrf::GetLegendFrameStyle()
{
	short result;
	GetProperty(0x5a, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetLegendFrameStyle(short propVal)
{
	SetProperty(0x5a, VT_I2, propVal);
}

long CFlpGrf::GetLegendJust()
{
	long result;
	GetProperty(0x5b, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetLegendJust(long propVal)
{
	SetProperty(0x5b, VT_I4, propVal);
}

short CFlpGrf::GetLegendLabelStyle()
{
	short result;
	GetProperty(0x5c, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetLegendLabelStyle(short propVal)
{
	SetProperty(0x5c, VT_I2, propVal);
}

short CFlpGrf::GetLegendPosHorz()
{
	short result;
	GetProperty(0x5d, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetLegendPosHorz(short propVal)
{
	SetProperty(0x5d, VT_I2, propVal);
}

long CFlpGrf::GetLegendPosHorzRef()
{
	long result;
	GetProperty(0x5e, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetLegendPosHorzRef(long propVal)
{
	SetProperty(0x5e, VT_I4, propVal);
}

short CFlpGrf::GetLegendPosVert()
{
	short result;
	GetProperty(0x5f, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetLegendPosVert(short propVal)
{
	SetProperty(0x5f, VT_I2, propVal);
}

long CFlpGrf::GetLegendPosVertRef()
{
	long result;
	GetProperty(0x60, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetLegendPosVertRef(long propVal)
{
	SetProperty(0x60, VT_I4, propVal);
}

short CFlpGrf::GetLegendTextDist()
{
	short result;
	GetProperty(0x61, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetLegendTextDist(short propVal)
{
	SetProperty(0x61, VT_I2, propVal);
}

CString CFlpGrf::GetPersistFile()
{
	CString result;
	GetProperty(0x62, VT_BSTR, (void*)&result);
	return result;
}

void CFlpGrf::SetPersistFile(LPCTSTR propVal)
{
	SetProperty(0x62, VT_BSTR, propVal);
}

short CFlpGrf::GetPieLabelDec()
{
	short result;
	GetProperty(0x63, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPieLabelDec(short propVal)
{
	SetProperty(0x63, VT_I2, propVal);
}

short CFlpGrf::GetPieLabelDist()
{
	short result;
	GetProperty(0x64, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPieLabelDist(short propVal)
{
	SetProperty(0x64, VT_I2, propVal);
}

short CFlpGrf::GetPieLabelFractOut()
{
	short result;
	GetProperty(0x65, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPieLabelFractOut(short propVal)
{
	SetProperty(0x65, VT_I2, propVal);
}

long CFlpGrf::GetPieLabelStyle()
{
	long result;
	GetProperty(0x66, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetPieLabelStyle(long propVal)
{
	SetProperty(0x66, VT_I4, propVal);
}

short CFlpGrf::GetPieSetRadius()
{
	short result;
	GetProperty(0x67, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPieSetRadius(short propVal)
{
	SetProperty(0x67, VT_I2, propVal);
}

double CFlpGrf::GetPieRotation()
{
	double result;
	GetProperty(0x68, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetPieRotation(double propVal)
{
	SetProperty(0x68, VT_R8, propVal);
}

short CFlpGrf::GetPieShoving()
{
	short result;
	GetProperty(0x69, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPieShoving(short propVal)
{
	SetProperty(0x69, VT_I2, propVal);
}

BOOL CFlpGrf::GetPieTether()
{
	BOOL result;
	GetProperty(0x6a, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetPieTether(BOOL propVal)
{
	SetProperty(0x6a, VT_BOOL, propVal);
}

short CFlpGrf::GetPrintBottom()
{
	short result;
	GetProperty(0x6b, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintBottom(short propVal)
{
	SetProperty(0x6b, VT_I2, propVal);
}

long CFlpGrf::GetPrintDpiWidth()
{
	long result;
	GetProperty(0x6c, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintDpiWidth(long propVal)
{
	SetProperty(0x6c, VT_I4, propVal);
}

long CFlpGrf::GetPrintDpiHeight()
{
	long result;
	GetProperty(0x6d, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintDpiHeight(long propVal)
{
	SetProperty(0x6d, VT_I4, propVal);
}

short CFlpGrf::GetPrintLeft()
{
	short result;
	GetProperty(0x6e, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintLeft(short propVal)
{
	SetProperty(0x6e, VT_I2, propVal);
}

short CFlpGrf::GetPrintLineWidth()
{
	short result;
	GetProperty(0x6f, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintLineWidth(short propVal)
{
	SetProperty(0x6f, VT_I2, propVal);
}

long CFlpGrf::GetPrintNow()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintNow(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CFlpGrf::GetPrintOrientation()
{
	long result;
	GetProperty(0x70, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintOrientation(long propVal)
{
	SetProperty(0x70, VT_I4, propVal);
}

short CFlpGrf::GetPrintRight()
{
	short result;
	GetProperty(0x71, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintRight(short propVal)
{
	SetProperty(0x71, VT_I2, propVal);
}

short CFlpGrf::GetPrintTop()
{
	short result;
	GetProperty(0x72, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintTop(short propVal)
{
	SetProperty(0x72, VT_I2, propVal);
}

BOOL CFlpGrf::GetResetControl()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetResetControl(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

short CFlpGrf::GetSpiderRotate()
{
	short result;
	GetProperty(0x73, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetSpiderRotate(short propVal)
{
	SetProperty(0x73, VT_I2, propVal);
}

short CFlpGrf::GetXYZGridSize()
{
	short result;
	GetProperty(0x74, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetXYZGridSize(short propVal)
{
	SetProperty(0x74, VT_I2, propVal);
}

long CFlpGrf::GetXYZType()
{
	long result;
	GetProperty(0x75, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetXYZType(long propVal)
{
	SetProperty(0x75, VT_I4, propVal);
}

short CFlpGrf::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

long CFlpGrf::GetColumnRowStart()
{
	long result;
	GetProperty(0x7c, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnRowStart(long propVal)
{
	SetProperty(0x7c, VT_I4, propVal);
}

long CFlpGrf::GetColumnRowEnd()
{
	long result;
	GetProperty(0x7d, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnRowEnd(long propVal)
{
	SetProperty(0x7d, VT_I4, propVal);
}

CString CFlpGrf::GetPrintPath()
{
	CString result;
	GetProperty(0x7e, VT_BSTR, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintPath(LPCTSTR propVal)
{
	SetProperty(0x7e, VT_BSTR, propVal);
}

BOOL CFlpGrf::GetObjectFindAutoZoom()
{
	BOOL result;
	GetProperty(0x7f, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetObjectFindAutoZoom(BOOL propVal)
{
	SetProperty(0x7f, VT_BOOL, propVal);
}

BOOL CFlpGrf::GetPrintAbortDialog()
{
	BOOL result;
	GetProperty(0x80, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintAbortDialog(BOOL propVal)
{
	SetProperty(0x80, VT_BOOL, propVal);
}

short CFlpGrf::GetGraphDataAspectRatioX()
{
	short result;
	GetProperty(0x81, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphDataAspectRatioX(short propVal)
{
	SetProperty(0x81, VT_I2, propVal);
}

short CFlpGrf::GetGraphDataAspectRatioY()
{
	short result;
	GetProperty(0x82, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphDataAspectRatioY(short propVal)
{
	SetProperty(0x82, VT_I2, propVal);
}

BOOL CFlpGrf::GetObjectClipToFrame()
{
	BOOL result;
	GetProperty(0x83, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetObjectClipToFrame(BOOL propVal)
{
	SetProperty(0x83, VT_BOOL, propVal);
}

long CFlpGrf::GetAxisDateIncType()
{
	long result;
	GetProperty(0x84, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisDateIncType(long propVal)
{
	SetProperty(0x84, VT_I4, propVal);
}

BOOL CFlpGrf::GetAxisTypeChar()
{
	BOOL result;
	GetProperty(0x85, VT_BOOL, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisTypeChar(BOOL propVal)
{
	SetProperty(0x85, VT_BOOL, propVal);
}

short CFlpGrf::GetLegendFont()
{
	short result;
	GetProperty(0x86, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetLegendFont(short propVal)
{
	SetProperty(0x86, VT_I2, propVal);
}

CString CFlpGrf::GetGraphNote()
{
	CString result;
	GetProperty(0x88, VT_BSTR, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphNote(LPCTSTR propVal)
{
	SetProperty(0x88, VT_BSTR, propVal);
}

long CFlpGrf::GetAxisTimeIncType()
{
	long result;
	GetProperty(0x89, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisTimeIncType(long propVal)
{
	SetProperty(0x89, VT_I4, propVal);
}

long CFlpGrf::GetColumnBarGradient()
{
	long result;
	GetProperty(0x8a, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnBarGradient(long propVal)
{
	SetProperty(0x8a, VT_I4, propVal);
}

long CFlpGrf::GetColumnBarGradientPercent()
{
	long result;
	GetProperty(0x8b, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnBarGradientPercent(long propVal)
{
	SetProperty(0x8b, VT_I4, propVal);
}

long CFlpGrf::GetToolTips()
{
	long result;
	GetProperty(0x8d, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetToolTips(long propVal)
{
	SetProperty(0x8d, VT_I4, propVal);
}

short CFlpGrf::GetColumnRegress()
{
	short result;
	GetProperty(0x8e, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnRegress(short propVal)
{
	SetProperty(0x8e, VT_I2, propVal);
}

short CFlpGrf::GetColumnRegressDegreesOfFreedom()
{
	short result;
	GetProperty(0x8f, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnRegressDegreesOfFreedom(short propVal)
{
	SetProperty(0x8f, VT_I2, propVal);
}

double CFlpGrf::GetColumnRegressCurveSegmentSize()
{
	double result;
	GetProperty(0x90, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnRegressCurveSegmentSize(double propVal)
{
	SetProperty(0x90, VT_R8, propVal);
}

long CFlpGrf::GetColumnMovingAve()
{
	long result;
	GetProperty(0x91, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnMovingAve(long propVal)
{
	SetProperty(0x91, VT_I4, propVal);
}

short CFlpGrf::GetColumnMovingAveNumberOfPoints()
{
	short result;
	GetProperty(0x92, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnMovingAveNumberOfPoints(short propVal)
{
	SetProperty(0x92, VT_I2, propVal);
}

short CFlpGrf::GetColumnMarkFont()
{
	short result;
	GetProperty(0x93, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnMarkFont(short propVal)
{
	SetProperty(0x93, VT_I2, propVal);
}

short CFlpGrf::GetColumnLabelsFont()
{
	short result;
	GetProperty(0x94, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnLabelsFont(short propVal)
{
	SetProperty(0x94, VT_I2, propVal);
}

long CFlpGrf::GetColumnMovingAveStyle()
{
	long result;
	GetProperty(0x95, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetColumnMovingAveStyle(long propVal)
{
	SetProperty(0x95, VT_I4, propVal);
}

long CFlpGrf::GetAxisScaleLabelStyle()
{
	long result;
	GetProperty(0x96, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScaleLabelStyle(long propVal)
{
	SetProperty(0x96, VT_I4, propVal);
}

long CFlpGrf::GetGraphBorderColorStyle()
{
	long result;
	GetProperty(0x97, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetGraphBorderColorStyle(long propVal)
{
	SetProperty(0x97, VT_I4, propVal);
}

long CFlpGrf::GetAxisScaleExponentStyle()
{
	long result;
	GetProperty(0x98, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisScaleExponentStyle(long propVal)
{
	SetProperty(0x98, VT_I4, propVal);
}

long CFlpGrf::GetPrintQuality()
{
	long result;
	GetProperty(0x99, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintQuality(long propVal)
{
	SetProperty(0x99, VT_I4, propVal);
}

short CFlpGrf::GetPrintExactSizeWidth()
{
	short result;
	GetProperty(0x9a, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintExactSizeWidth(short propVal)
{
	SetProperty(0x9a, VT_I2, propVal);
}

short CFlpGrf::GetPrintExactSizeHeight()
{
	short result;
	GetProperty(0x9b, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintExactSizeHeight(short propVal)
{
	SetProperty(0x9b, VT_I2, propVal);
}

short CFlpGrf::GetPrintExactSize()
{
	short result;
	GetProperty(0x9c, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintExactSize(short propVal)
{
	SetProperty(0x9c, VT_I2, propVal);
}

double CFlpGrf::GetPrintExactInchWidth()
{
	double result;
	GetProperty(0x9d, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintExactInchWidth(double propVal)
{
	SetProperty(0x9d, VT_R8, propVal);
}

double CFlpGrf::GetPrintExactInchHeight()
{
	double result;
	GetProperty(0x9e, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintExactInchHeight(double propVal)
{
	SetProperty(0x9e, VT_R8, propVal);
}

short CFlpGrf::GetPrintYResolution()
{
	short result;
	GetProperty(0x9f, VT_I2, (void*)&result);
	return result;
}

void CFlpGrf::SetPrintYResolution(short propVal)
{
	SetProperty(0x9f, VT_I2, propVal);
}

long CFlpGrf::GetAxisFunction()
{
	long result;
	GetProperty(0xa0, VT_I4, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisFunction(long propVal)
{
	SetProperty(0xa0, VT_I4, propVal);
}

double CFlpGrf::GetAxisFunctionVar()
{
	double result;
	GetProperty(0xa1, VT_R8, (void*)&result);
	return result;
}

void CFlpGrf::SetAxisFunctionVar(double propVal)
{
	SetProperty(0xa1, VT_R8, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CFlpGrf operations

void CFlpGrf::AxisLengthToExp(short Length)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xa2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Length);
}

void CFlpGrf::AxisShadeRange(unsigned long ShadeColor, double ShadeLower, double ShadeUpper)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0xa3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ShadeColor, ShadeLower, ShadeUpper);
}

void CFlpGrf::BackPicture(LPCTSTR FileName, long Style, short XOffset, short YOffset)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0xa4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileName, Style, XOffset, YOffset);
}

void CFlpGrf::BackPictureOffset(short XOffset, short YOffset)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xa5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 XOffset, YOffset);
}

unsigned long CFlpGrf::GetDataColor(long row, long Column)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		row, Column);
	return result;
}

void CFlpGrf::SetDataColor(long row, long Column, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xf0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 row, Column, newValue);
}

short CFlpGrf::GetDataStyle(long row, long Column)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf1, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		row, Column);
	return result;
}

void CFlpGrf::SetDataStyle(long row, long Column, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0xf1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 row, Column, nNewValue);
}

VARIANT CFlpGrf::GetDataValueAsStr(long row, long Column)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		row, Column);
	return result;
}

VARIANT CFlpGrf::GetDataValue(long row, long Column)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		row, Column);
	return result;
}

void CFlpGrf::SetDataValue(long row, long Column, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_VARIANT;
	InvokeHelper(0xf3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 row, Column, &newValue);
}

CString CFlpGrf::GetDataValueLabel(long row, long Column)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		row, Column);
	return result;
}

void CFlpGrf::SetDataValueLabel(long row, long Column, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0xf4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 row, Column, lpszNewValue);
}

long CFlpGrf::GetDataPattern(long row, long Column)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		row, Column);
	return result;
}

void CFlpGrf::SetDataPattern(long row, long Column, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xf5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 row, Column, nNewValue);
}

short CFlpGrf::GetDataLegend(long row, long Column)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf6, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		row, Column);
	return result;
}

void CFlpGrf::SetDataLegend(long row, long Column, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0xf6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 row, Column, nNewValue);
}

short CFlpGrf::GetDataSize(long row, long Column)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf7, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		row, Column);
	return result;
}

void CFlpGrf::SetDataSize(long row, long Column, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0xf7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 row, Column, nNewValue);
}

short CFlpGrf::GetDataExplode(long row, long Column)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf8, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		row, Column);
	return result;
}

void CFlpGrf::SetDataExplode(long row, long Column, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0xf8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 row, Column, nNewValue);
}

BOOL CFlpGrf::GetGraphVisible(short GraphNumber)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xf9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		GraphNumber);
	return result;
}

void CFlpGrf::SetGraphVisible(short GraphNumber, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0xf9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 GraphNumber, bNewValue);
}

void CFlpGrf::GraphAreaFrame(BOOL IsFrame, short BackColor, long FrameStyle)
{
	static BYTE parms[] =
		VTS_BOOL VTS_I2 VTS_I4;
	InvokeHelper(0xa6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 IsFrame, BackColor, FrameStyle);
}

short CFlpGrf::ImageToClipboard()
{
	short result;
	InvokeHelper(0xa7, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL CFlpGrf::ImageToFile(LPCTSTR FileName, short Width, short Height, const VARIANT& Bits, const VARIANT& DPI)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xa8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, Width, Height, &Bits, &DPI);
	return result;
}

BOOL CFlpGrf::ImageToGif(LPCTSTR FileName, short Width, short Height, const VARIANT& DPI, const VARIANT& CreatePalette)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xa9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, Width, Height, &DPI, &CreatePalette);
	return result;
}

BOOL CFlpGrf::LoadGraph(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xaa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

void CFlpGrf::LoadGraphDialog(LPCTSTR FileExt)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xab, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileExt);
}

void CFlpGrf::ObjectPen(short PenFg, short PenBg, long PenStyle, short PenWidth, long PenMode)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I4 VTS_I2 VTS_I4;
	InvokeHelper(0xac, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PenFg, PenBg, PenStyle, PenWidth, PenMode);
}

void CFlpGrf::ObjectBrush(short BrushFg, short BrushBg, long BrushStyle, long BrushMode)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0xad, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 BrushFg, BrushBg, BrushStyle, BrushMode);
}

void CFlpGrf::ObjectFont(short FontHandle, long FontAlign, long FontJustify, short FontOrient)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0xae, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FontHandle, FontAlign, FontJustify, FontOrient);
}

void CFlpGrf::ObjectHotBrush(short BrushFg, short BrushBg, long BrushStyle, long BrushMode)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0xaf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 BrushFg, BrushBg, BrushStyle, BrushMode);
}

void CFlpGrf::ObjectHotFont(short FontHandle, long FontAlign, long FontJustify, short FontOrient)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0xb0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FontHandle, FontAlign, FontJustify, FontOrient);
}

void CFlpGrf::ObjectHotPen(short PenFg, short PenBg, long PenStyle, short PenWidth, long PenMode)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I4 VTS_I2 VTS_I4;
	InvokeHelper(0xb1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PenFg, PenBg, PenStyle, PenWidth, PenMode);
}

void CFlpGrf::ObjectFindButton(short button)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xb2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 button);
}

long CFlpGrf::ObjectTextAdd(float x, float y, LPCTSTR text)
{
	long result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_BSTR;
	InvokeHelper(0xb3, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		x, y, text);
	return result;
}

long CFlpGrf::ObjectRectAdd(long type, float x1, float y1, float x2, float y2)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0xb4, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		type, x1, y1, x2, y2);
	return result;
}

long CFlpGrf::ObjectPictAdd(LPCTSTR FileName, float x1, float y1, float x2, float y2, short offsetX, short offsetY, long Style, long border)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I2 VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0xb5, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		FileName, x1, y1, x2, y2, offsetX, offsetY, Style, border);
	return result;
}

void CFlpGrf::ObjectHotMove(float x1, float y1)
{
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0xb6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 x1, y1);
}

long CFlpGrf::ObjectHotDelete()
{
	long result;
	InvokeHelper(0xb7, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CFlpGrf::ObjectHotTextMod(LPCTSTR text)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		text);
	return result;
}

void CFlpGrf::ObjectScaleType(long xScale, long yScale)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xb9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 xScale, yScale);
}

long CFlpGrf::ObjectHotSelect(long ObjectNumber)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xba, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ObjectNumber);
	return result;
}

void CFlpGrf::ObjectHotSize(short iHandle, double x, double y)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8 VTS_R8;
	InvokeHelper(0xbb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 iHandle, x, y);
}

long CFlpGrf::ObjectTextAddRect(float left, float top, float right, float bottom, LPCTSTR text, short format)
{
	long result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_BSTR VTS_I2;
	InvokeHelper(0xbc, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		left, top, right, bottom, text, format);
	return result;
}

void CFlpGrf::PassLabelBack(LPCTSTR Label)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Label);
}

BOOL CFlpGrf::SaveGraph(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xc0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

void CFlpGrf::SaveGraphDialog(LPCTSTR FileExt)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xc1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FileExt);
}

double CFlpGrf::ScaleFromAbs(long Abs, long Axis)
{
	double result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xc2, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Abs, Axis);
	return result;
}

double CFlpGrf::ScaleFromTwips(long Twips, long Axis)
{
	double result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xc3, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Twips, Axis);
	return result;
}

void CFlpGrf::SetLinePattern(short PatternNum, short Pattern, short InkLength, short SpaceLength)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0xc4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PatternNum, Pattern, InkLength, SpaceLength);
}

short CFlpGrf::FontNumber()
{
	short result;
	InvokeHelper(0xc5, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL CFlpGrf::FontClose(short nFont)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xc6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nFont);
	return result;
}

void CFlpGrf::FontFace(short nFont, LPCTSTR Face)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0xc7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nFont, Face);
}

void CFlpGrf::SavePersistData()
{
	InvokeHelper(0xc8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CFlpGrf::AxisDateFormat(LPCTSTR FormatString)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xc9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 FormatString);
}

void CFlpGrf::GraphFrameAlign(short AlignmentBits)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xca, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 AlignmentBits);
}

BOOL CFlpGrf::ImageToTransGif(LPCTSTR FileName, short Width, short Height, short TransparentIndex, const VARIANT& DPI, const VARIANT& CreatePalette)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xcb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, Width, Height, TransparentIndex, &DPI, &CreatePalette);
	return result;
}

unsigned long CFlpGrf::GetColorTable(short index)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xfa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		index);
	return result;
}

void CFlpGrf::SetColorTable(short index, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0xfa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, newValue);
}

short CFlpGrf::ColorTableIndexFromRGB(unsigned long RGBColor)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xcc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		RGBColor);
	return result;
}

short CFlpGrf::GraphData(short GraphNumber)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		GraphNumber);
	return result;
}

short CFlpGrf::GraphCount()
{
	short result;
	InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CFlpGrf::ScaleToAbs(double Value, long Axis)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_I4;
	InvokeHelper(0xcf, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Value, Axis);
	return result;
}

long CFlpGrf::ScaleToTwips(double Value, long Axis)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_I4;
	InvokeHelper(0xd0, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Value, Axis);
	return result;
}

short CFlpGrf::PrintMultiInit(short type)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xd1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		type);
	return result;
}

short CFlpGrf::PrintMultiPage()
{
	short result;
	InvokeHelper(0xd2, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CFlpGrf::PrintMultiEnd()
{
	short result;
	InvokeHelper(0xd3, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CFlpGrf::DataValueMethod(long row, long Column, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_VARIANT;
	InvokeHelper(0xd4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 row, Column, &newValue);
}

short CFlpGrf::MetafileToClipboard()
{
	short result;
	InvokeHelper(0xd5, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CFlpGrf::GraphPreCalc()
{
	InvokeHelper(0xd6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CFlpGrf::StoreDataObject(LPDISPATCH pdispData)
{
	long result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xd7, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pdispData);
	return result;
}

void CFlpGrf::ObjectHotSendToBack()
{
	InvokeHelper(0xd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CFlpGrf::ObjectHotSendToFront()
{
	InvokeHelper(0xd9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CFlpGrf::ObjectHotArrowhead(long type, short Size)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0xda, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 type, Size);
}

double CFlpGrf::ColumnRegressCoeff(short Degree)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xdb, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Degree);
	return result;
}

void CFlpGrf::AxisShadeRangeRemove()
{
	InvokeHelper(0xdc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CFlpGrf::BackPictureClear()
{
	InvokeHelper(0xdd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CFlpGrf::ObjectHotPictureOffset(short OffsetHorz, short OffsetVert)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xde, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 OffsetHorz, OffsetVert);
}

void CFlpGrf::SetBrushPattern(short nBrushNum, const VARIANT& aByteArray)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0xdf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nBrushNum, &aByteArray);
}

double CFlpGrf::ColumnMax()
{
	double result;
	InvokeHelper(0xe0, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

double CFlpGrf::ColumnMin()
{
	double result;
	InvokeHelper(0xe1, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

long CFlpGrf::ColumnCount()
{
	long result;
	InvokeHelper(0xe2, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CFlpGrf::GraphFrameTop()
{
	short result;
	InvokeHelper(0xe3, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CFlpGrf::GraphFrameRight()
{
	short result;
	InvokeHelper(0xe4, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CFlpGrf::GraphFrameLeft()
{
	short result;
	InvokeHelper(0xe5, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CFlpGrf::GraphFrameBottom()
{
	short result;
	InvokeHelper(0xe6, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL CFlpGrf::ImageToPNG(LPCTSTR FileName, short Width, short Height, BOOL Interlaced, const VARIANT& DPI)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_BOOL VTS_VARIANT;
	InvokeHelper(0xe7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, Width, Height, Interlaced, &DPI);
	return result;
}

VARIANT CFlpGrf::PrintGetValidDPIArray()
{
	VARIANT result;
	InvokeHelper(0xe8, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

short CFlpGrf::MetafileToDisk(LPCTSTR FileName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xe9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		FileName);
	return result;
}

VARIANT CFlpGrf::PrintGetValidPrinters()
{
	VARIANT result;
	InvokeHelper(0xea, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT CFlpGrf::ObjectHotInfo()
{
	VARIANT result;
	InvokeHelper(0xee, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT CFlpGrf::ObjectInfo(short ObjectNumber)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xef, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		ObjectNumber);
	return result;
}

void CFlpGrf::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
