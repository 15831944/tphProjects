// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "mschart.h"

// Dispatch interfaces referenced by this interface
#include "vctitle.h"
#include "vcfootnote.h"
#include "vcbackdrop.h"
#include "vclegend.h"
#include "VcPlot.h"
#include "VcAxis.h"
#include "VcValueScale.h"
#include "VcSeriesCollection.h"
#include "VcSeries.h"
#include "VcPen.h"
#include "VcCategoryScale.h"
#include "VcColor.h"
#include "VcDataGrid.h"
#include "VcBackdrop.h"
#include "VcFill.h"
#include "VcBrush.h"
#include "VcDataPoints.h"
#include "VcDataPoint.h"
#include "VcDataPointLabel.h"
#include "VcAxisTitle.h"
#include "vcfont.h" 

#include "../dibapi.h"
/////////////////////////////////////////////////////////////////////////////
// CMSChart

IMPLEMENT_DYNCREATE(CMSChart, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CMSChart properties

/////////////////////////////////////////////////////////////////////////////
// CMSChart operations

BOOL CMSChart::GetAutoIncrement()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSChart::SetAutoIncrement(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CMSChart::GetRandomFill()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSChart::SetRandomFill(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CMSChart::GetChartType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSChart::SetChartType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CMSChart::GetColumn()
{
	short result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CMSChart::SetColumn(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CMSChart::GetColumnCount()
{
	short result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CMSChart::SetColumnCount(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString CMSChart::GetColumnLabel()
{
	CString result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CMSChart::SetColumnLabel(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

short CMSChart::GetColumnLabelCount()
{
	short result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CMSChart::SetColumnLabelCount(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CMSChart::GetColumnLabelIndex()
{
	short result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CMSChart::SetColumnLabelIndex(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString CMSChart::GetData()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CMSChart::SetData(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CMSChart::GetFootnoteText()
{
	CString result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CMSChart::SetFootnoteText(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

BOOL CMSChart::GetRepaint()
{
	BOOL result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSChart::SetRepaint(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

short CMSChart::GetRow()
{
	short result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CMSChart::SetRow(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CMSChart::GetRowCount()
{
	short result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CMSChart::SetRowCount(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString CMSChart::GetRowLabel()
{
	CString result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CMSChart::SetRowLabel(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

short CMSChart::GetRowLabelCount()
{
	short result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CMSChart::SetRowLabelCount(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CMSChart::GetRowLabelIndex()
{
	short result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CMSChart::SetRowLabelIndex(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CMSChart::GetSeriesColumn()
{
	short result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CMSChart::SetSeriesColumn(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSChart::GetSeriesType()
{
	long result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSChart::SetSeriesType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CMSChart::GetShowLegend()
{
	BOOL result;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSChart::SetShowLegend(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x13, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CMSChart::GetDrawMode()
{
	long result;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSChart::SetDrawMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSChart::GetBorderStyle()
{
	long result;
	InvokeHelper(DISPID_BORDERSTYLE, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSChart::SetBorderStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(DISPID_BORDERSTYLE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CMSChart::GetEnabled()
{
	BOOL result;
	InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSChart::SetEnabled(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CMSChart::GetHWnd()
{
	long result;
	InvokeHelper(DISPID_HWND, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CVcTitle CMSChart::GetTitle()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CVcTitle(pDispatch);
}

CVcFootnote CMSChart::GetFootnote()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CVcFootnote(pDispatch);
}

CString CMSChart::GetTitleText()
{
	CString result;
	InvokeHelper(0x1c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CMSChart::SetTitleText(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

BOOL CMSChart::GetStacking()
{
	BOOL result;
	InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSChart::SetStacking(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CMSChart::GetTextLengthType()
{
	long result;
	InvokeHelper(0x1e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSChart::SetTextLengthType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CMSChart::GetAllowSelections()
{
	BOOL result;
	InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSChart::SetAllowSelections(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CMSChart::GetAllowSeriesSelection()
{
	BOOL result;
	InvokeHelper(0x21, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSChart::SetAllowSeriesSelection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x21, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CMSChart::GetAllowDynamicRotation()
{
	BOOL result;
	InvokeHelper(0x22, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSChart::SetAllowDynamicRotation(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x22, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

short CMSChart::GetActiveSeriesCount()
{
	short result;
	InvokeHelper(0x23, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

CVcBackdrop CMSChart::GetBackdrop()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x24, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CVcBackdrop(pDispatch);
}

CVcLegend CMSChart::GetLegend()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x26, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CVcLegend(pDispatch);
}

CVcDataGrid CMSChart::GetDataGrid()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CVcDataGrid(pDispatch);
}

CVcPlot CMSChart::GetPlot()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CVcPlot(pDispatch);
}

BOOL CMSChart::GetAllowDithering()
{
	BOOL result;
	InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSChart::SetAllowDithering(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CMSChart::GetDoSetCursor()
{
	BOOL result;
	InvokeHelper(0x2d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CMSChart::SetDoSetCursor(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CMSChart::GetChart3d()
{
	BOOL result;
	InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

VARIANT CMSChart::GetChartData()
{
	VARIANT result;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CMSChart::SetChartData(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

long CMSChart::GetMousePointer()
{
	long result;
	InvokeHelper(0x4a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSChart::SetMousePointer(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void CMSChart::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CMSChart::EditPaste()
{
	InvokeHelper(0x31, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CMSChart::EditCopy()
{
	InvokeHelper(0x32, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CMSChart::Layout()
{
	InvokeHelper(0x34, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CMSChart::ToDefaults()
{
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CMSChart::SelectPart(short part, short index1, short index2, short index3, short index4)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 part, index1, index2, index3, index4);
}

void CMSChart::GetSelectedPart(short* part, short* index1, short* index2, short* index3, short* index4)
{
	static BYTE parms[] =
		VTS_PI2 VTS_PI2 VTS_PI2 VTS_PI2 VTS_PI2;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 part, index1, index2, index3, index4);
}

void CMSChart::TwipsToChartPart(long xVal, long yVal, short* part, short* index1, short* index2, short* index3, short* index4)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI2 VTS_PI2 VTS_PI2 VTS_PI2 VTS_PI2;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 xVal, yVal, part, index1, index2, index3, index4);
}

long CMSChart::GetOLEDragMode()
{
	long result;
	InvokeHelper(0x60e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSChart::SetOLEDragMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x60e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CMSChart::GetOLEDropMode()
{
	long result;
	InvokeHelper(0x60f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CMSChart::SetOLEDropMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x60f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void CMSChart::OLEDrag()
{
	InvokeHelper(0x610, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPUNKNOWN CMSChart::GetDataSource()
{
	LPUNKNOWN result;
	InvokeHelper(0x47, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

void CMSChart::SetRefDataSource(LPUNKNOWN newValue)
{
	static BYTE parms[] =
		VTS_UNKNOWN;
	InvokeHelper(0x47, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 newValue);
}

CString CMSChart::GetDataMember()
{
	CString result;
	InvokeHelper(0x4b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CMSChart::SetDataMember(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void CMSChart::PropertyEdit(void)
{
	USES_CONVERSION;;

	// Get Property Page CLSID's
	ISpecifyPropertyPages* pSpecify = NULL;
	IUnknown* pUnk = GetControlUnknown();
	if (FAILED(pUnk->QueryInterface(IID_ISpecifyPropertyPages,(void**)&pSpecify)))	
		return;

	CAUUID pages;
	pages.cElems = 0;
	pages.pElems = NULL;
	if (FAILED(pSpecify->GetPages(&pages)))
	{
		pSpecify->Release();
		return;
	}
	// display the control's property pages.        
	OleCreatePropertyFrame(m_hWnd, 0, 0, T2OLE("MSChart"), 1, &pUnk, pages.cElems,
		pages.pElems, GetUserDefaultLCID(), 0, NULL);
	// clean up
	pSpecify->Release();
	CoTaskMemFree(pages.pElems);
}

void CMSChart::SetAxiLabe(int nInterval)
{
	VARIANT var;
	GetPlot().GetAxis(0,var).GetCategoryScale().SetAuto(FALSE); 
	GetPlot().GetAxis(0,var).GetCategoryScale().SetDivisionsPerLabel(nInterval); 
	GetPlot().GetAxis(0,var).GetCategoryScale().SetDivisionsPerTick(nInterval); 
}

//draw 2D 3DChart 
bool CMSChart::DrawChart(C2DChartData & c2dChartData)
{
	bool bReturn = false;
	if(c2dChartData.m_vr2DChartData.empty())
		return (false);

	VARIANT var;
	GetBackdrop().GetFill().SetStyle(VtFillStyleBrush);
	GetBackdrop().GetFill().GetBrush().GetFillColor().Set(255, 255, 255);
	SetStacking(FALSE);

	SetTitleText(c2dChartData.m_strChartTitle);
	GetTitle().GetVtFont().SetStyle(VtFontStyleBold);
	GetTitle().GetVtFont().SetSize(20); 
	GetTitle().GetVtFont().SetName(_T("Arial"));

	SetFootnoteText(c2dChartData.m_strFooter); 
	GetFootnote().GetVtFont().SetSize(8);
	GetFootnote().GetVtFont().SetName(_T("MS Sans Serif"));

	
	GetPlot().GetAxis(0,var).GetAxisTitle().SetText(c2dChartData.m_strXtitle);
	//GetPlot().GetAxis(0,var).GetAxisTitle().GetVtFont().SetStyle(0);
	GetPlot().GetAxis(0,var).GetAxisTitle().GetVtFont().SetSize(12);
	GetPlot().GetAxis(0,var).GetAxisTitle().GetVtFont().SetName(_T("Arial"));

	GetPlot().GetAxis(1,var).GetAxisTitle().SetText(c2dChartData.m_strYtitle);
	//GetPlot().GetAxis(1,var).GetAxisTitle().GetVtFont().SetStyle(0);
	GetPlot().GetAxis(1,var).GetAxisTitle().GetVtFont().SetSize(12);
	GetPlot().GetAxis(1,var).GetAxisTitle().GetVtFont().SetName(_T("Arial"));

	int nRowCount = (int)c2dChartData.m_vrXTickTitle.size();
	int nColumnCount = (int)c2dChartData.m_vr2DChartData.size();
	bool bSetColLabel = (int)c2dChartData.m_vrLegend.size() == nColumnCount;
	int nRowIndex = 0,nColumnIndex = 0;
	SetRowCount(nRowCount);
	SetColumnCount(nColumnCount);
	if(bSetColLabel)
		SetShowLegend(TRUE); 
	else
		SetShowLegend(FALSE);

	for (nRowIndex = 0;nRowIndex < nRowCount;++nRowIndex) {
		SetRow(nRowIndex + 1);
		SetRowLabel(c2dChartData.m_vrXTickTitle[nRowIndex]);
	}

	for (nColumnIndex = 0;nColumnIndex < nColumnCount;++nColumnIndex) {
		SetColumn(nColumnIndex + 1);
		if(bSetColLabel)
			SetColumnLabel(c2dChartData.m_vrLegend[nColumnIndex]);
		for (nRowIndex = 0;nRowIndex < nRowCount;++nRowIndex) {
			SetRow(nRowIndex + 1); 
			GetDataGrid().SetData(nRowIndex + 1, nColumnIndex + 1,c2dChartData.m_vr2DChartData[nColumnIndex][nRowIndex], 0);
		}
	}

	//SetAllowSelections(FALSE);
	Refresh();
	return (bReturn);
}

//change 3DChart type 
bool CMSChart::SetMSChartType(Arc3DChartType actype3DChart/* = Arc3DChartType_2D_Bar*/)
{ 
	bool bReturn = false; 
	switch (actype3DChart)
	{	
	case Arc3DChartType_2D_Bar://ArcChartType_2D_Bar:
		SetChartType(VtChChartType2dBar);   
		bReturn = true; 
		break;
	case Arc3DChartType_3D_Bar://ArcChartType_2D_Line:
		SetChartType(VtChChartType3dBar); 
		bReturn = true; 
		break;
	case Arc3DChartType_2D_Line://ArcChartType_2D_Line:
		SetChartType(VtChChartType2dLine); 
		bReturn = true; 
		break;
	case Arc3DChartType_3D_Line://ArcChartType_2D_Line:
		SetChartType(VtChChartType3dLine); 
		bReturn = true; 
		break;
	case Arc3DChartType_2D_Area://ArcChartType_2D_Line:
		SetChartType(VtChChartType2dArea); 
		bReturn = true; 
		break;
	case Arc3DChartType_3D_Area://ArcChartType_2D_Line:
		SetChartType(VtChChartType3dArea); 
		bReturn = true; 
		break;
	default:
		bReturn = true; 
		if((int)actype3DChart == 6)
			SetChartType(VtChChartType3dStep); 
		else if((int)actype3DChart == 7)
			SetChartType(VtChChartType2dStep);  
		else if((int)actype3DChart == 8)
			SetChartType(VtChChartType3dCombination);  
		else if((int)actype3DChart == 9)
			SetChartType(VtChChartType2dCombination);  
		else if((int)actype3DChart == 14)
			SetChartType(VtChChartType2dPie); 
		else
			bReturn = false;
		break;
	}
	Refresh();
	return (bReturn);
}

//print chart
bool CMSChart::PrintMSChart(void)
{
	bool bReturn = false;

	HANDLE hDib = 0;
	HPALETTE hPalette = 0;
	BITMAPINFO* pbi = 0;

	EditCopy(); 
	if(!OpenClipboard()) 
		return (false);

	hDib = GetClipboardData(CF_DIB);
	hPalette = (HPALETTE)GlobalLock(GetClipboardData(CF_PALETTE)); 


	CPrintDialog dlgPrintChart(FALSE,PD_NONETWORKBUTTON|PD_SHOWHELP|PD_SELECTION|PD_RETURNDC|PD_ALLPAGES | PD_USEDEVMODECOPIES | PD_NOPAGENUMS | PD_HIDEPRINTTOFILE,this);
	if(dlgPrintChart.DoModal() == IDOK)
	{ 
		SetMapMode(dlgPrintChart.m_pd.hDC, MM_TEXT); 
		int nHorRes = GetDeviceCaps(dlgPrintChart.m_pd.hDC, HORZRES); 
		int nVerRes = GetDeviceCaps(dlgPrintChart.m_pd.hDC, VERTRES);
		CRect rectDC;
		CRect rectDIB;
		rectDC.SetRect(0,0,nHorRes,nVerRes);
		pbi = (BITMAPINFO*)GlobalLock(hDib);
		rectDIB.SetRect(0, 0, DIBWidth((LPSTR)pbi),DIBHeight((LPSTR)pbi));
		GlobalUnlock(hDib);
		pbi = 0; 

		if(dlgPrintChart.m_pd.hDC)
		{	
			DOCINFO di;   
			di.cbSize = sizeof(DOCINFO);  
			di.lpszDocName = _T("3D Chart Print");
			di.lpszOutput = 0;  
			di.lpszDatatype = 0; 
			di.fwType = 0;
			StartDoc(dlgPrintChart.m_pd.hDC,&di); 
			bReturn = true;
			for (int i = dlgPrintChart.m_pd.nCopies;i >= 1;--i) {
				StartPage(dlgPrintChart.m_pd.hDC);  
				SetMapMode(dlgPrintChart.m_pd.hDC, MM_TEXT); 
				if(!PaintDIB(dlgPrintChart.m_pd.hDC,rectDC,(HDIB)hDib,rectDIB,CPalette::FromHandle(hPalette)))
					bReturn = false;
				EndPage(dlgPrintChart.m_pd.hDC); 
			}
			EndDoc(dlgPrintChart.m_pd.hDC);  
		}
		else
			bReturn = false;
	}
	else
		bReturn = false;

	GlobalUnlock(hPalette);
	CloseClipboard();

	return (bReturn);
}


//export chart to bitmap file
bool CMSChart::ExportToBMPFile(void)
{
	bool bReturn = false;
	HANDLE hDib = 0;

	EditCopy(); 
	if(!OpenClipboard()) 
		return (false);

	hDib = GetClipboardData(CF_DIB); 


	CFileDialog dlgSaveChart(FALSE,_T(".bmp"),_T("ChartToExport"),OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT,_T("Bitmap Files(*.bmp)|*.bmp||"),this, 0, FALSE );
	if(dlgSaveChart.DoModal() == IDOK)
	{ 		
		CFile file;
		try
		{
			file.Open(dlgSaveChart.GetPathName(),CFile::modeCreate|CFile::modeWrite|CFile::typeBinary);
			if(SaveDIB((HDIB)hDib,file))
				bReturn = true;
			else
				bReturn = false;
			file.Close(); 
		}catch(CFileException * pFileExp)
		{
			pFileExp->Delete();
			bReturn = false;
		}

		bReturn = true;
	}
	else
		bReturn = false; 

	CloseClipboard();

	return (bReturn);
}

//export chart to bitmap file
bool CMSChart::ExportToClipboard(void)
{
	CDC* pChartDC;

	// Get device context from MSChart
	pChartDC = GetDC();

	// Get dimensions of MSChart
	RECT mschartRect;
	GetClientRect( &mschartRect );
	int mschartWidth = mschartRect.right - mschartRect.left;
	int mschartHeight = mschartRect.bottom - mschartRect.top;

	// Create CBitmap
	CBitmap myBitmap;

	// Create Compatible Bitmap for MSChart
	myBitmap.CreateCompatibleBitmap( pChartDC, 
		mschartWidth, mschartHeight );

	// Define device-context object
	CDC myCopy;
	myCopy.CreateCompatibleDC( pChartDC );

	// Get pointer to object being replaced
	myCopy.SelectObject( myBitmap );

	// Raster copy Bitmap from object pChartDC is pointing to, which is MSChart

	// CAUTION: this process copies _exactly_ what is shown on screen. If MSChart is
	// off-screen (ie. if the page is scrollable and it is currently hidden from
	// view) OR a dialog or other window is blocking its view, then you will not
	// get the correct result, as it will either turn out all black or have
	// artifacts from other windows on it. It is for this reason I have chosen to
	// copy the MSChart _before_ showing the 'Save File Dialog'
	myCopy.BitBlt( 0, 0, mschartWidth, mschartHeight, pChartDC, 0, 0, SRCCOPY );

	// Retrieve information about the CBitmap
	BITMAP bits;
	myBitmap.GetBitmap( &bits );

	// Open clipboard and empty its contents
	OpenClipboard();
	EmptyClipboard();

	// Copy our new MSChart bitmap to clipboard and close it
	SetClipboardData( CF_BITMAP, myBitmap.GetSafeHandle() );
	CloseClipboard();
	
	return true;
}