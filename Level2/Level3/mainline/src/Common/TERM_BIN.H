/*****
*
*   Module:     Arcterm Binary Log Structures
*   Author:     Lincoln Fellingham
*   Date:       Summer 93
*   Purpose:    Defines precise structure for all log files generated by
*               ARCTERM's simulation engine
*
*   Revision:   Jan 96 - LF - Update flight log structures to handle
*               turnaround flights, plus prepare for detailed log
*               listings for flight activities
*
*               Also started rule for binary files that places a float
*               at the beginning of all binary files that stores the
*               version number of the file format, to allow for
*               automatic version updating
*
*****/


#ifndef ARCTERM_BINARY_H
#define ARCTERM_BINARY_H

#include "template.h"
#include "elaptime.h"
#include "StartDate.h"
#include "IDGather.h"

#pragma pack(push, 1)

// Mobile Element information
typedef struct
{
    long    id;                 // Mobile Element identification
	long    terminalStartTime;	//Mobile Element enter terminal time
	long    terminalEndTime;	//Mobile Element exit terminal time
    long    startTime;          // First hit time
    long    endTime;            // Last hit time
	long	enplanTime;			// start onboard enplane time
    long    startPos;           // pointer to start of track in binary file
    long    endPos;             // pointer to end of track in binary file
	long	fileID;
	char	mobileType;			// the index to the mobiletype list.
    char    intrinsic;          // basic type
    short   paxType[MAX_PAX_TYPES];  // type description
    short   arrFlight;          // index of element's arriving flight in list
    short   depFlight;          // index of element's departing flight in list
    char    groupSize;          // size of group (1+)
    char    groupMember;        // element's group member number (0+)
    char    bagCount;           // number of bags (group), -1 if none
    char    cartCount;          // number of carts (group), -1 if none
    long    ownerID;	         // pax's visitor or visitor's pax, -1 if none
    long    indexNum;           // index of pax in log
	float   speed;				// speed of the person moves.
	char	ownStart;			// has its own start.
	char	eachPaxOwnNoPax;	// is not group own no_pax.
	bool	bMissFlightDeath;	// the flag of pax miss flight.
	char	carryonCount;		// non passenger count
	int		nBulkIndex;			//bulk info
	long	nFreqIndex;			//bulk freq
	long	missFlightTime;
	long	flightRealDepartureTime;
	short	bBulkProfileCapacity;

	// Mobile Element Rotation angle
	float   xAngle;
	float   yAngle;
	float   zAngle;
	float   w;
} MobDescStruct;

typedef struct _MobDescStructEx {
	COLORREF		color;
	BOOL			visible;
	BOOL			leavetrail;
	int				shape;
	int				linetype;
	BOOL			showtags;
	DWORD			taginfo;
	int				displaylistid; //index in PaxDispProps -1 if default, -2 if overlap
} MobDescStructEx;

// Tracking information
typedef struct _MobEventStruct
{
	long	elementID;
	long    time;               // current hit time (1/18.2 of second)
	float   x;                  // x position of hit in nm
	float   y;                  // x position of hit in nm
	float  speed ;				 //the speed  
	float   m_RealZ ;            // if m_IsRealZ is true , this value will be uesd when write log .
	short   z;                  // z position of hit (floor)
	short   procNumber;         // index of current processor
	short   reason;				// ( currently, only used in conveyor system ) which processor cause me stop
	short   state;              // state of element at this hit (states.h)
	char    m_IsRealZ;          // if true , z is the real value for log , else z will be handled by floor when write log in 3D view .
	char	m_motionDir;		//onboard animation mobile element motion direction(four state: forward(F),backward(B),leftsidle(L),rightsidle(R)) 
	bool    m_bVisible:1;		//visitor walk with owner if true draw in 3dview,or hide in 3dview
	bool    m_bWithOwner:1;  //if visitor walk with owner
	bool	bDynamicCreatedProc:1;// ( currently ,only used in TLOS Created new processor dynamicly ) it means whether or not processor( procNumber ) is dynamicly created
	bool	followowner:1;  // flag visitor is moveing with its owner or not; to pax,the flag is invalidate
	bool    backup:1;    // point the direction of out constrain 
	// point the direction of out constrain 


	_MobEventStruct()
	{
	   elementID  = -1;
	   m_bWithOwner = true;
	   m_bVisible = true;
       speed = 0 ;
	   m_IsRealZ = FALSE ;
	   m_RealZ =0 ;
	   m_motionDir = 'F';
	};
} MobEventStruct;               // 20 bytes



// Binary flight record
typedef struct tagFlightDescStruct
{
    //	char airline[AIRLINE_LEN];  // airline designator (1-3 char)
	CAirlineID airline;

    //short arrID;                // numeric flight code, arriving
	CFlightID	arrID;

	
	CAirportCode origin;    //the airport before the fromAirport
  
	CAirportCode arrStopover;   // originating airport code
    
	//CStartDate	arrDate;		//	arrival date

	long arrTime;               // arrival time @ gate, hundsecs
    short arrLoad;              // count of passengers arriving
    
	//short depID;                // numeric flight code, departing
	CFlightID depID;

	CAirportCode depStopover; // to airport code
    
	CAirportCode destination;     //the airport after the toAirport

	//CStartDate depDate;			//	departure date

	long depTime;               // departure time from gate, hundsecs
    short depLoad;              // count of passengers departing
    //char acType[AC_TYPE_LEN];   // type code of aircraft

	CAircraftType	acType;

    short gate;                 // index of gate used
    short bagCarosel;           // index of carosel used
    long startPos;              // location of flight's first track
    long endPos;                // location of flight's last track
	ElapsedTime arrDelay;				// arrival delay time
	ElapsedTime depDelay;				// depart delay time
	ElapsedTime gateOccupancy;			// duration time the gate is occupied
	ElapsedTime bagFirstBirthTimeInReclaim;
	ElapsedTime bagLastLeaveTimeInReclaim;
	float arrloadFactor;
	float deploadFactor;
	int capacity;
	short nArrGate;
	short nDepGate;
	float nStandGateX;                  // x position of ac stand gate
    float nStandGateY;                  // x position of ac stand gate
    short nStandGateZ;                  // z position of ac stand gate (floor)
	
	// arrLoad = nArrTransit + nArrTransfer + arr
	// depLoad = nDepTransit + nDepTransfer + dep
	short nDepTransit;					// total number of transit on dep flight
	short nArrTransit;					// total number of transit on arr flight
	short nDepTransfer;					// total number of transfer on dep flight.
	short nArrTransfer;					// total number of transfer on arr flight.

	tagFlightDescStruct()
	{
		arrID = depID = 0;
		arrTime = depTime = -1l;
		arrLoad = depLoad = 0;
		gate = bagCarosel = -1;
		startPos = endPos =0;
		arrDelay = depDelay = gateOccupancy = 0l;
		bagFirstBirthTimeInReclaim = bagLastLeaveTimeInReclaim -1l;
		arrloadFactor = -1.0;
		deploadFactor = -1.0;
		capacity = -1;
		nArrGate = 	nDepGate = -1;
		nStandGateX = nStandGateY = 0.0;
		nStandGateZ = 0;
		nDepTransit = nArrTransit = 0;
		nDepTransfer = nArrTransfer = 0;
	}

	tagFlightDescStruct(const tagFlightDescStruct& _item)
	{
		airline = _item.airline;
		arrID = _item.arrID;
		origin = _item.origin;
		arrStopover = _item.arrStopover;
		arrTime = _item.arrTime;
		arrLoad = _item.arrLoad;
		depID = _item.depID;
		depStopover = _item.depStopover;
		destination = _item.destination;
		depTime = _item.depTime;
		depLoad = _item.depLoad;
		acType = _item.acType;
		gate = _item.gate;
		bagCarosel = _item.bagCarosel;
		startPos = _item.startPos;
		endPos = _item.endPos;
		arrDelay = _item.arrDelay;
		depDelay = _item.depDelay;
		gateOccupancy = _item.gateOccupancy;
		bagFirstBirthTimeInReclaim = _item.bagFirstBirthTimeInReclaim;
		bagLastLeaveTimeInReclaim = _item.bagLastLeaveTimeInReclaim;
		arrloadFactor = _item.arrloadFactor;
		deploadFactor = _item.deploadFactor;
		capacity = _item.capacity;
		nArrGate = _item.nArrGate;
		nDepGate = _item.nDepGate;
		nStandGateX = _item.nStandGateX;
		nStandGateY = _item.nStandGateY;
		nStandGateZ = _item.nStandGateZ;
		nDepTransit = _item.nDepTransit;
		nArrTransit = _item.nArrTransit;
		nDepTransfer = _item.nDepTransfer;
		nArrTransfer = _item.nArrTransfer;
	}

	const tagFlightDescStruct& operator=(const tagFlightDescStruct& _item)
	{
		airline = _item.airline;
		arrID = _item.arrID;
		origin = _item.origin;
		arrStopover = _item.arrStopover;
		arrTime = _item.arrTime;
		arrLoad = _item.arrLoad;
		depID = _item.depID;
		depStopover = _item.depStopover;
		destination = _item.destination;
		depTime = _item.depTime;
		depLoad = _item.depLoad;
		acType = _item.acType;
		gate = _item.gate;
		bagCarosel = _item.bagCarosel;
		startPos = _item.startPos;
		endPos = _item.endPos;
		arrDelay = _item.arrDelay;
		depDelay = _item.depDelay;
		gateOccupancy = _item.gateOccupancy;
		bagFirstBirthTimeInReclaim = _item.bagFirstBirthTimeInReclaim;
		bagLastLeaveTimeInReclaim = _item.bagLastLeaveTimeInReclaim;
		arrloadFactor = _item.arrloadFactor;
		deploadFactor = _item.deploadFactor;
		capacity = _item.capacity;
		nArrGate = _item.nArrGate;
		nDepGate = _item.nDepGate;
		nStandGateX = _item.nStandGateX;
		nStandGateY = _item.nStandGateY;
		nStandGateZ = _item.nStandGateZ;
		nDepTransit = _item.nDepTransit;
		nArrTransit = _item.nArrTransit;
		nDepTransfer = _item.nDepTransfer;
		nArrTransfer = _item.nArrTransfer;
		
		return (*this);
	}


} FlightDescStruct;             // 62 bytes


// Binary flight event record
typedef struct
{
    long time;                  // time of flight event
    char type;                  // event type (see states.h)
    long element;               // associated mobile element/bag, -1 if none
} FlightEventStruct;            // 9 bytes


// Binary Processor Description record
typedef struct
{
    short name[MAX_PROC_IDS];   // full name of processor
    short index;                // processor's index in list
    char procType;              // processor class
    char hasQueue;              // flag indicating queue
    long startPos;              // eventFile offset of 1st event
    long endPos;                // eventFile offset of last event
	char disallowGroup;			// flag indicating group is not allow be service at the same time.
} ProcDescStruct;               // 20 bytes

// Binary Processor Event record
typedef struct
{
    long time;                  // time of processor event
    char type;                  // event type (see states.h)
    long element;               // associated mobile element/bag, -1 if none
	long lLoad;					// (now, used only in conveyor system.) it means the count of baggages on conveyor
	long lReason;				// (now, used only in conveyor system.) it means which processor casue me stop moving
} ProcEventStruct;              // 13 bytes


typedef struct
{
    long id;
    long paxID;
    short flight;
    long startTime;
    long endTime;
    short procNumber;
    long startPos;              // eventFile offset of 1st event
    long endPos;                // eventFile offset of last event
	ElapsedTime lagTime;

} BagDescStruct;                // xx bytes

typedef struct
{
    long    time;               // time of processor event
    char    type;               // event type (see states.h)
    float   x;                  // x position of hit in nm
    float   y;                  // x position of hit in nm
    char    z;                  // z position of hit (floor)
    short   procNumber;         // index of current processor
} BagEventStruct;               // 16 bytes


// Train information
typedef struct
{
	char    id[TRAIN_ID_LEN];               // Train ID
	int	ID;
    long    startTime;          // First hit time
    long    endTime;            // Last hit time
	int		numCars;
	float	carLength;
	float	carWidth;
	float	speed;
	float	accelerateSpeed;
	float	decelerateSpeed;
	long	circleTime;
	long	turnArroundTime;
	long	headWayTime;
    long    startPos;           // pointer to start of track in binary file
    long    endPos;             // pointer to end of track in binary file
    long    indexNum;           // index of pax in log
} TrainDescStruct;                // 24 bytes


// Train track information
typedef struct
{
    long    time;               // current hit time (1/18.2 of second)
    float   x;                  // x position of hit in nm
    float   y;                  // x position of hit in nm
    short   z;                  // z position of hit (floor)
	float	heading;			// heading
    char    state;              // state of element at this hit (states.h)
} TrainEventStruct;             


typedef struct 
{
	char    id[TRAIN_ID_LEN];   // Elevator lift ID
    long    startTime;          // First hit time
    long    endTime;            // Last hit time
    long    startPos;           // pointer to start of track in binary file
    long    endPos;             // pointer to end of track in binary file
	double  liftLength;			
	double liftWidth;
	long    indexNum;
	double  orientation;
}ElevatorDescStruct;

typedef struct 
{
	long    time;               // current hit time (1/18.2 of second)
    float   x;                  // x position of hit in nm
    float   y;                  // x position of hit in nm
    short   z;                  // z position of hit (floor)
    char    state;              // state of element at this hit (states.h)
}ElevatorEventStruct;

// resource element information
typedef struct 
{
	long	id;					// resource Element id
	int	    pool_idx;			// the index of resourec pool
	char	name[RESOURCE_NAME_LEN];	// resource Element Name
	long	startTime;			// First hit time
	long	endTime;			// Last hit time
	long	startPos;			// pointer to start of track in binary file
    long    endPos;             // pointer to end of track in binary file
	long    indexNum;			// index in resource log
	float	speed;				// speed of the resource element moves
} ResDescStruct;

typedef struct 
{
	long    time;               // current hit time (1/18.2 of second)
    float   x;                  // x position of hit in nm
    float   y;                  // x position of hit in nm
    short   z;                  // z position of hit (floor)
    char    state;              // state of element at this hit (states.h)
} ResEventStruct;

//Bridge resource information
typedef struct 
{
	int name[MAX_PROC_IDS];   // full name of processor
    long indexNum;                // processor's index in list
    char procType;              // processor class

	//processor location
	double xLocation;
	double yLocation;
	double zLocation;

	double dWidth;
	double dLength;

	//direction from
	double xDirFrom;
	double yDirFrom;
	double zDirFrom;

	//direction to
	double xDirTo;
	double yDirTo;
	double zDirTo;

	//the processor start time & end time
	long	startTime;			// First hit time
	long	endTime;			// Last hit time

	long	startPos;			// pointer to start of track in binary file
    long    endPos;             // pointer to end of track in binary file

	double	speed;				// speed of the resource element moves
} BridgeConnectorDescStruct;

typedef struct 
{
	long    time;               // current hit time (1/18.2 of second)

    double   x;                  // x position of hit in cm
    double   y;                  // x position of hit in cm
    double   z;                  // z position of hit (floor)

    char    state;              // state of element at this hit (states.h)
} BridgeConnectorEventStruct;

typedef struct
{
	short	name[MAX_PROC_IDS];
	long	indexNum; 
	long	procIndex;
	char	procType;
	char	subType;
	char	retailType;
	long	startPos;
	long	endPos;
}RetailDescStruct;

typedef struct
{
	long	time;
	char	state;
	long	paxID;
	long	itemTypeID;
	long	itemCount;
	double	price;
	double	airportCut;
	bool	InventoryOk;
}RetailEventStruct;

#pragma pack(pop)

#endif
