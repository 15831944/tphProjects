/*****
*
*   Class       MobileElementMovementEvent
*   Author      Lincoln Fellingham, Aviation Research Corporation
*   Date        December 4, 1992
*   Purpose     Event class used to schedule passenger movements though
*               a terminal
*
*****/

#ifndef MOVEMENT_EVENT_H
#define MOVEMENT_EVENT_H

#include "engine\terminalevent.h"
#include "common\template.h"
#include "common\containr.h"
 

class CARCportEngine;

//MobileElementMovementEvent class is used to schedule passenger movements though a terminal.
class MobileElementMovementEvent : public TerminalEvent
{
protected:

    //Memory used by instances of MobileElementMovementEvent, improves efficiency when fequently allocating and freeing memory.
    // Passenger with the scheduled movement.
    MobileElement *mobileElement;
	//need to write log or not
	bool m_bNoLog;

public:
    MobileElementMovementEvent() 
	{
		mobileElement = NULL; 
		m_bNoLog = false;
	};

    //copy constructor.
    MobileElementMovementEvent (const MobileElementMovementEvent& anEvent)
	{ 
		mobileElement = anEvent.mobileElement;
		m_bNoLog = anEvent.m_bNoLog;
	};

    virtual ~MobileElementMovementEvent() { mobileElement = NULL; }

    // initializes an event.
    virtual void init (MobileElement *aMover, ElapsedTime eventTime,bool bNoLog)
	{ 
		mobileElement = aMover; 
		time = eventTime; 
		m_bNoLog=bNoLog;
	};

    // Main event processing routine, handles logic of movement.
    // Returns TRUE, all events unique.
    virtual int process (CARCportEngine *_pEngine );

    //For shut down event.
    virtual int kill (void);

    //Returns event's name
    virtual const char *getTypeName (void) const { return "Movement"; };

    //Returns event type
    int getEventType (void) const { return MobileMovement; };

    // Searches the Event List for a movement event for the passed Mobile Element. If found, it is removed. 
    // Return value is the scheduled event time if an event is found, (Time)-1 otherwise.
    ElapsedTime removeMoveEvent (MobileElement *anElement);

	// remove all event which is generated by _pElement
	static void RemoveAllMobileElementEvent( MobileElement * _pElement );
	
	MobileElement* GetMobileElement() { return mobileElement;}

};


// resource element move Event
class ResourceElementMovementEvent : public MobileElementMovementEvent
{
public:
	//Returns event's name
    virtual const char *getTypeName (void) const { return "Resource Movement"; };
	
    //Returns event type
    int getEventType (void) const { return ResourceMovementEvent; };
};

#endif
